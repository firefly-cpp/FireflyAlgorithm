name: fireflyalgorithm

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
    - name: Install poetry
      run: |
        curl -sL https://install.python-poetry.org | python - -y
    - name: Update path
      if: ${{ matrix.os != 'windows-latest' }}
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH
    - name: Update Windows path
      if: ${{ matrix.os == 'windows-latest' }}
      run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH
    - name: Configure poetry
      run: poetry config virtualenvs.in-project true
    - name: Set up cache
      uses: actions/cache@v3
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry run pip --version || rm -rf .venv
    - name: Install dependencies
      run: poetry install
    - name: Run tests
      run: poetry run pytest
